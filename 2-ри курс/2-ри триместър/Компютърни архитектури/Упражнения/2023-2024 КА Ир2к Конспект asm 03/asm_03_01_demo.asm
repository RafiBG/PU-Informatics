;Примерно съдържание на прозореца Input:
;1 2 3 4 5 6
;-1 -2 -3 -4
;101 -22 303 -44 505 -66 707 -88

;Съответен текст извеждан в прозореца Output:
;1 , 2 , 3 , 4 , 5 , 6
;-1 , -2 , -3 , -4
;101 , -22 , 303 , -44 , 505 , -66 , 707 , -88

%include "io64.inc"

  Len1 equ 6 ; дължина на първия "масив"
  Len2 equ 4 ; дължина на втория "масив"
  Len3 equ 8 ; дължина на третия "масив"
  
section .bss ; за заделена памет (тя се нулира по подразбиране)
    ar1 resq Len1 ; място за първия "масив"
    ar2 resq Len2 ; място за втория "масив"
    ar3 resq Len3 ; място за третия "масив"
    
section .data ; за изброени конкретни данни
    ; следващите две инструкции към транслатора
    ; записват в секцията за данни
    ; адресите, които са стойности на съответните етикети
    adrReadArray   dq readArray ; адрес за извикване на readArray
    adrWriteArray  dq writeArray ; входна точка на writeArray
    
section .text ; за изпълним код

global main ; съобщава на транслатора входната точка на приложението

readArray:
    ; Чете 8-байтови цели числа
    ; и ги записва по нарастване на адресите
    ;   r9 -- брой на елементите
    ;   rdi -- адрес за първото число
    pushfq
        cmp r9, 0
        jle .stop ; .stop е еквивалентен на readArray.stop
        push r15
                xor r15, r15 ; r15 е индекс на поредно число                
            .next: ; .next е еквивалентен на readArray.next
                    GET_DEC 8, [rdi + r15*8] ; въвежда число
                inc r15 ; получава индекса на следващо число
                cmp r15, r9 ; сравнява индекса на число с броя на числата
                jnge .next ; еквивалентно на jnge readArray.next
        pop r15
        .stop: ; еквивалентно на readArray.stop:
    popfq
ret ; readArray
; ret чете от стека адрес и подава управлението към него;
; така се връща управлението след инструкцията за извикване на процедурата

writeArray:
    ; Извежда 8-байтови цели числа
    ; в ред по нарастване на адресите
    ; и минава на нов ред
    ;   r9 -- брой на елементите
    ;   rdi -- адрес за първото число
    pushfq
        cmp r9, 0
        jle .stop ; преход при r9<=0
                  ; .stop е еквивалентен на writeArray.stop
        push r15 ; r15 --- индекс на поредно число
        push r10 ; r10 --- адрес на разделител, предшестващ числото
                xor r15, r15
                lea r10, [.empty] ; за разделител празен низ
            .next: ; .next е еквивалентен на readArray.next
                    PRINT_STRING [r10] ; извежда разделител пред числото
                    lea r10, [.separator] ; за истински разделител
                    PRINT_DEC 8, [rdi + r15*8] ; извежда поредното число
                inc r15 ; преминава към индекс на следващото число
                cmp r15, r9 ; сравнява индекса на числото с броя на числата
                jnge .next ; еквивалентно на jnge readArray.next
            NEWLINE
        pop r10
        pop r15
        .stop: ; еквивалентно на readArray.stop:
    popfq
section .data
    .separator  db " , "
    .empty      db 0 ; едновременно е и признак за край на низа " , "
section .text
ret ; writeArray

main:

    ; следва обработка на първия масив:
    mov r9, Len1 ; подготовка на броя на числата за readArray
    lea rdi, [ar1] ; подготовка на адреса на първо число за readArray
    call readArray ; извиква процедурата за въвеждане на числата
    ; call readArray записва в стека адреса на следващата (след call)
    ; инструкция и подава управлението към адрес readArray
    
    ; r9 и rdi са останали без промяна от изпълнението на call readArray
    ; и са готови за подаване към writeArray
    call writeArray ; извиква с входна точка writeArray
    
    ; следва обработка на втория масив:
    mov r9, Len2
    lea rdi, [ar2]
    call readArray
    call writeArray

    ; следва обработка на третия масив:
    mov r9, Len3
    lea rdi, [ar3]
    call [adrReadArray] ; прочита входната точка от адрес adrReadArray
    call [adrWriteArray] ; извиква процедурата с входна точка,
                         ; прочитана от адрес adrWriteArray
    
xor eax, eax ; подготвя код нула (за коректно приключване) за подаване към ОС
             ; като код за начина на приключване на това приложение
ret ; main
; горната инструкция връща управлението към ОС,
; защото съответства на main:
; и в приложението има инструкция за транслатора global main

